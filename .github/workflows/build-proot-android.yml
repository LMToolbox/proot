name: Build PRoot for Android

on:
  workflow_dispatch:

env:
  PREFIX: ./dependencies/install
  DWNLD: ./dependencies/download
jobs:
  build:
    strategy:
      matrix:
        arch: [aarch64, x86_64]

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Android NDK
        uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r28c

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Set up QEMU
        if: matrix.arch == 'aarch64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Download dependencies
        run: |
          mkdir -p ${{ env.PREFIX }}
          mkdir -p ${{ env.DWNLD }}
          export PATCHES_DIR=$(realpath patches)
          cd ${{ env.DWNLD }}

          # libarchive
          git clone https://github.com/libarchive/libarchive.git -b v3.8.1
          cp $PATCHES_DIR/libarchive/*.patch libarchive/ 2>/dev/null || true
          git clone https://github.com/madler/zlib.git -b v1.3.1
          cp $PATCHES_DIR/zlib/*.patch zlib/ 2>/dev/null || true

          # talloc
          curl -LO https://www.samba.org/ftp/talloc/talloc-2.4.3.tar.gz
          tar xzf talloc-2.4.3.tar.gz
          mv talloc-2.4.3 talloc
          cp $PATCHES_DIR/talloc/*.patch talloc/ 2>/dev/null || true


          # uthash
          git clone https://github.com/troydhanson/uthash.git -b v2.3.0
          cp $PATCHES_DIR/uthash/*.patch uthash/ 2>/dev/null || true

          git clone https://github.com/proot-me/proot.git

      - name: Build dependencies
        env:
          ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
          ARCH: ${{ matrix.arch }}
          PREFIX: ${{ env.PREFIX }}
          DWNLD: ${{ env.DWNLD }}
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake libtool pkg-config

          WORKDIR=$(realpath .)
          export ENV_SET=$(realpath ./set-envs.sh)
          . $ENV_SET

          ln -sf ${TOOLCHAIN}/bin/${TARGET}${API}-clang ${TOOLCHAIN}/bin/${TARGET}${API}-gcc
          ln -sf ${TOOLCHAIN}/bin/${TARGET}${API}-clang++ ${TOOLCHAIN}/bin/${TARGET}${API}-g++
          ln -sf ${TOOLCHAIN}/bin/llvm-strip ${TOOLCHAIN}/bin/${TARGET}${API}-strip
          ln -sf ${TOOLCHAIN}/bin/llvm-objcopy ${TOOLCHAIN}/bin/${TARGET}${API}-objcopy
          ln -sf ${TOOLCHAIN}/bin/llvm-objdump ${TOOLCHAIN}/bin/${TARGET}${API}-objdump

          apply_patches() {
            for p in *.patch; do
              [ -f "$p" ] || continue
              echo "Applying patch $p"
              patch -p0 < "$p"
            done
          }

          # libarchive
          cd $DWNLD/zlib
          apply_patches
          ./configure --prefix=$PREFIX --static
          make
          make install

          cd $DWNLD/libarchive
          apply_patches
          sh ./build/autogen.sh
          ./configure --host=$TARGET --prefix=$PREFIX \
            --without-xml2 \
            --without-openssl \
            --without-nettle \
            --without-expat \
            --without-iconv \
            --without-bz2lib \
            --without-lzma \
            --without-lz4 \
            --without-zstd \
            --without-xattr \
            --without-acl \
            --disable-shared \
            --enable-static
          make
          make install
          cd ..

          # talloc
          cd $DWNLD/talloc
          apply_patches
          if [ "$ARCH" = "aarch64" ]; then
            cp $ENV_SET .
            echo "Running in Docker with QEMU emulation for ARM64"
            docker run --rm -t --platform linux/arm64 \
              -v "$PWD":/workspace \
              -v "$ANDROID_NDK":"$ANDROID_NDK" \
              -w /workspace \
              -e ANDROID_NDK="$ANDROID_NDK" \
              -e ARCH="$ARCH" \
              -e PREFIX="$PREFIX" \
              -e DWNLD="$DWNLD" \
              ubuntu:24.04 bash -c "
                . ./set-envs.sh &&
                export DEBIAN_FRONTEND=noninteractive
                apt-get update &&
                apt-get install -y build-essential autoconf automake libtool pkg-config python3 python3-venv &&
                python3 -m venv ./venv &&
                . ./venv/bin/activate &&
                ./configure --host $TARGET --prefix=$PREFIX &&
                make &&
                make install
              "
          else
            echo "Running natively on $ARCH"
            python3 -m venv .venv
            . .venv/bin/activate
            ./configure --host $TARGET --prefix=$PREFIX
            make
            make install
          fi

          # uthash
          cd $DWNLD/uthash
          apply_patches
          mkdir -p $PREFIX/include/
          cp -r src/* $PREFIX/include/

          export CROSS_COMPILE="${TOOLCHAIN}/bin/${TARGET}${API}-"

          cd $DWNLD/proot/src
          export B_CFLAGS=$CFLAGS
          export B_LDFLAGS=$LDFLAGS
          export CFLAGS="-std=gnu89 $CFLAGS"
          export LDFLAGS="$LDFLAGS -static -lz"
          make loader.elf loader-m32.elf build.h
          make proot care
          export CFLAGS=$B_CFLAGS
          export LDFLAGS=$B_LDFLAGS

          DIST_DIR="$WORKDIR/dist/$ARCH"
          mkdir -p "$DIST_DIR"
          cp proot "$DIST_DIR/"
          cp care "$DIST_DIR/"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: proot-android-${{ matrix.arch }}
          path: dist/${{ matrix.arch }}/
